<templateSet group="Java">
  <template name="bae" value="public static void main(String[] args) throws IOException {&#10;    input();&#10;}&#10;&#10;private static void input() {&#10;    FastReader scan = new FastReader();&#10;    int input = scan.nextInt();$END$&#10;}&#10;&#10;static class FastReader {&#10;    BufferedReader br;&#10;    StringTokenizer st;&#10;&#10;    public FastReader() {&#10;        br = new BufferedReader(new InputStreamReader(System.in));&#10;    }&#10;&#10;    public FastReader(String s) throws FileNotFoundException {&#10;        br = new BufferedReader(new FileReader(new File(s)));&#10;    }&#10;&#10;    String next() {&#10;        while (st == null || !st.hasMoreElements()) {&#10;            try {&#10;                st = new StringTokenizer(br.readLine());&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        return st.nextToken();&#10;    }&#10;&#10;    int nextInt() {&#10;        return Integer.parseInt(next());&#10;    }&#10;&#10;    long nextLong() {&#10;        return Long.parseLong(next());&#10;    }&#10;&#10;    double nextDouble() {&#10;        return Double.parseDouble(next());&#10;    }&#10;&#10;    String nextLine() {&#10;        String str = &quot;&quot;;&#10;        try {&#10;            str = br.readLine();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;        return str;&#10;    }&#10;}&#10;&#10;static class FastWriter {&#10;    final BufferedWriter bw;&#10;&#10;    public FastWriter() {&#10;        bw = new BufferedWriter(new OutputStreamWriter(System.out));&#10;    }&#10;&#10;    public void print(int target) {&#10;        try {&#10;            bw.write(target + &quot;&quot;);&#10;            bw.flush();&#10;            bw.close();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void print(String target) {&#10;        try {&#10;            bw.write(target);&#10;            bw.flush();&#10;            bw.close();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void print(char[] target) {&#10;        try {&#10;            bw.write(target);&#10;            bw.flush();&#10;            bw.close();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" description="Baekjoon Algorithm default setting" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="fr" value="static class FastReader {&#10;    BufferedReader br;&#10;    StringTokenizer st;&#10;&#10;    public FastReader() {&#10;        br = new BufferedReader(new InputStreamReader(System.in));&#10;    }&#10;&#10;    public FastReader(String s) throws FileNotFoundException {&#10;        br = new BufferedReader(new FileReader(new File(s)));&#10;    }&#10;&#10;    String next() {&#10;        while (st == null || !st.hasMoreElements()) {&#10;            try {&#10;                st = new StringTokenizer(br.readLine());&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;        return st.nextToken();&#10;    }&#10;&#10;    int nextInt() {&#10;        return Integer.parseInt(next());&#10;    }&#10;&#10;    long nextLong() {&#10;        return Long.parseLong(next());&#10;    }&#10;&#10;    double nextDouble() {&#10;        return Double.parseDouble(next());&#10;    }&#10;&#10;    String nextLine() {&#10;        String str = &quot;&quot;;&#10;        try {&#10;            str = br.readLine();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;        return str;&#10;    }&#10;}" description="Fast Reader" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="ts" value="@Test&#10;void solution() {&#10;    $END$&#10;    Assertions.assertThat(target.solution());&#10;}" description="Test(Junit5) for Algorithm Solution" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>